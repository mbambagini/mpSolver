// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hardware.proto

#ifndef PROTOBUF_hardware_2eproto__INCLUDED
#define PROTOBUF_hardware_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Hardware {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_hardware_2eproto();
void protobuf_AssignDesc_hardware_2eproto();
void protobuf_ShutdownFile_hardware_2eproto();

class Link;
class Processor;
class Platform;

// ===================================================================

class Link : public ::google::protobuf::Message {
 public:
  Link();
  virtual ~Link();
  
  Link(const Link& from);
  
  inline Link& operator=(const Link& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Link& default_instance();
  
  void Swap(Link* other);
  
  // implements Message ----------------------------------------------
  
  Link* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Link& from);
  void MergeFrom(const Link& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id1 = 1;
  inline bool has_id1() const;
  inline void clear_id1();
  static const int kId1FieldNumber = 1;
  inline ::google::protobuf::int32 id1() const;
  inline void set_id1(::google::protobuf::int32 value);
  
  // required int32 id2 = 2;
  inline bool has_id2() const;
  inline void clear_id2();
  static const int kId2FieldNumber = 2;
  inline ::google::protobuf::int32 id2() const;
  inline void set_id2(::google::protobuf::int32 value);
  
  // required int32 speed = 3;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 3;
  inline ::google::protobuf::int32 speed() const;
  inline void set_speed(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:Hardware.Link)
 private:
  inline void set_has_id1();
  inline void clear_has_id1();
  inline void set_has_id2();
  inline void clear_has_id2();
  inline void set_has_speed();
  inline void clear_has_speed();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id1_;
  ::google::protobuf::int32 id2_;
  ::google::protobuf::int32 speed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_hardware_2eproto();
  friend void protobuf_AssignDesc_hardware_2eproto();
  friend void protobuf_ShutdownFile_hardware_2eproto();
  
  void InitAsDefaultInstance();
  static Link* default_instance_;
};
// -------------------------------------------------------------------

class Processor : public ::google::protobuf::Message {
 public:
  Processor();
  virtual ~Processor();
  
  Processor(const Processor& from);
  
  inline Processor& operator=(const Processor& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Processor& default_instance();
  
  void Swap(Processor* other);
  
  // implements Message ----------------------------------------------
  
  Processor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Processor& from);
  void MergeFrom(const Processor& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // required int32 speed = 2;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 2;
  inline ::google::protobuf::int32 speed() const;
  inline void set_speed(::google::protobuf::int32 value);
  
  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:Hardware.Processor)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 speed_;
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_hardware_2eproto();
  friend void protobuf_AssignDesc_hardware_2eproto();
  friend void protobuf_ShutdownFile_hardware_2eproto();
  
  void InitAsDefaultInstance();
  static Processor* default_instance_;
};
// -------------------------------------------------------------------

class Platform : public ::google::protobuf::Message {
 public:
  Platform();
  virtual ~Platform();
  
  Platform(const Platform& from);
  
  inline Platform& operator=(const Platform& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Platform& default_instance();
  
  void Swap(Platform* other);
  
  // implements Message ----------------------------------------------
  
  Platform* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Platform& from);
  void MergeFrom(const Platform& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Hardware.Processor processors = 1;
  inline int processors_size() const;
  inline void clear_processors();
  static const int kProcessorsFieldNumber = 1;
  inline const ::Hardware::Processor& processors(int index) const;
  inline ::Hardware::Processor* mutable_processors(int index);
  inline ::Hardware::Processor* add_processors();
  inline const ::google::protobuf::RepeatedPtrField< ::Hardware::Processor >&
      processors() const;
  inline ::google::protobuf::RepeatedPtrField< ::Hardware::Processor >*
      mutable_processors();
  
  // repeated .Hardware.Link links = 2;
  inline int links_size() const;
  inline void clear_links();
  static const int kLinksFieldNumber = 2;
  inline const ::Hardware::Link& links(int index) const;
  inline ::Hardware::Link* mutable_links(int index);
  inline ::Hardware::Link* add_links();
  inline const ::google::protobuf::RepeatedPtrField< ::Hardware::Link >&
      links() const;
  inline ::google::protobuf::RepeatedPtrField< ::Hardware::Link >*
      mutable_links();
  
  // @@protoc_insertion_point(class_scope:Hardware.Platform)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Hardware::Processor > processors_;
  ::google::protobuf::RepeatedPtrField< ::Hardware::Link > links_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_hardware_2eproto();
  friend void protobuf_AssignDesc_hardware_2eproto();
  friend void protobuf_ShutdownFile_hardware_2eproto();
  
  void InitAsDefaultInstance();
  static Platform* default_instance_;
};
// ===================================================================


// ===================================================================

// Link

// required int32 id1 = 1;
inline bool Link::has_id1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Link::set_has_id1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Link::clear_has_id1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Link::clear_id1() {
  id1_ = 0;
  clear_has_id1();
}
inline ::google::protobuf::int32 Link::id1() const {
  return id1_;
}
inline void Link::set_id1(::google::protobuf::int32 value) {
  set_has_id1();
  id1_ = value;
}

// required int32 id2 = 2;
inline bool Link::has_id2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Link::set_has_id2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Link::clear_has_id2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Link::clear_id2() {
  id2_ = 0;
  clear_has_id2();
}
inline ::google::protobuf::int32 Link::id2() const {
  return id2_;
}
inline void Link::set_id2(::google::protobuf::int32 value) {
  set_has_id2();
  id2_ = value;
}

// required int32 speed = 3;
inline bool Link::has_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Link::set_has_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Link::clear_has_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Link::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline ::google::protobuf::int32 Link::speed() const {
  return speed_;
}
inline void Link::set_speed(::google::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
}

// -------------------------------------------------------------------

// Processor

// required int32 id = 1;
inline bool Processor::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Processor::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Processor::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Processor::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Processor::id() const {
  return id_;
}
inline void Processor::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 speed = 2;
inline bool Processor::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Processor::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Processor::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Processor::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline ::google::protobuf::int32 Processor::speed() const {
  return speed_;
}
inline void Processor::set_speed(::google::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
}

// required string name = 3;
inline bool Processor::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Processor::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Processor::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Processor::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Processor::name() const {
  return *name_;
}
inline void Processor::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Processor::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Processor::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Processor::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Processor::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Platform

// repeated .Hardware.Processor processors = 1;
inline int Platform::processors_size() const {
  return processors_.size();
}
inline void Platform::clear_processors() {
  processors_.Clear();
}
inline const ::Hardware::Processor& Platform::processors(int index) const {
  return processors_.Get(index);
}
inline ::Hardware::Processor* Platform::mutable_processors(int index) {
  return processors_.Mutable(index);
}
inline ::Hardware::Processor* Platform::add_processors() {
  return processors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Hardware::Processor >&
Platform::processors() const {
  return processors_;
}
inline ::google::protobuf::RepeatedPtrField< ::Hardware::Processor >*
Platform::mutable_processors() {
  return &processors_;
}

// repeated .Hardware.Link links = 2;
inline int Platform::links_size() const {
  return links_.size();
}
inline void Platform::clear_links() {
  links_.Clear();
}
inline const ::Hardware::Link& Platform::links(int index) const {
  return links_.Get(index);
}
inline ::Hardware::Link* Platform::mutable_links(int index) {
  return links_.Mutable(index);
}
inline ::Hardware::Link* Platform::add_links() {
  return links_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Hardware::Link >&
Platform::links() const {
  return links_;
}
inline ::google::protobuf::RepeatedPtrField< ::Hardware::Link >*
Platform::mutable_links() {
  return &links_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Hardware

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hardware_2eproto__INCLUDED
